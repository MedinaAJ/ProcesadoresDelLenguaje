/* ----------------------Seccion de declaraciones package e imports--------------------*/
import java.io.*;
import java.util.Scanner;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;
//Librerias utilizadas para ejecutar codigo JavaScript almacenado en un String
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

/* ----------------------Seccion componentes de codigo de usuario --------------------*/
action code {: 

	boolean fallo;
	String error;
	MaquinaMoore machine, actual;
	int contador_maquinas;
        ArrayList<MaquinaMoore> maquinas;
	ArrayList<String> estados, eventos, comps, transiciones, comps_estado, estados_iniciales;
	ArrayList<ArrayList<String>> estados_por_automata, eventos_por_automata, comps_por_automata, trans_por_automata, comps_est_por_automata;
	Hashtable<String, String> comp_codigo;
	String estado_inicial;
	ScriptEngineManager script;
	ScriptEngine js;


:}
/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/
non terminal aux, programa, dec_comp, automata, dec_automata, cuerpo_automata, estados, dec_estados, estado_ini, alf_in, dec_alf_in, alf_out, dec_alf_out, transicion, dec_transicion, comportamientos, dec_comportamientos;
non terminal String codigo, comp_def, transicion_def;

terminal String CMP, CODIGO, MOORE, ID, LLCORCH_OP, LLCORCH_CL, ESTADOS, ESTADO_INI, ALF_IN, ALF_OUT, TRANS, COMPORTAMIENTO, COMA, PUNTO_COMA, LLPARENT_OP, LLPARENT_CL, ALM_OP, ALM_CL;

/* -------------Declaracion de precedencias -----------*/

/* --------------Declaracion de la gramatica -----------*/

aux ::= {: 

	fallo = false;
	error = "";
	script = new ScriptEngineManager(); 
	js = script.getEngineByName("JavaScript"); 
	contador_maquinas = 0; 
	estados = new ArrayList<String>();
        eventos = new ArrayList<String>();
        comps = new ArrayList<String>(); 
	transiciones= new ArrayList<String>();
	comps_estado = new ArrayList<String>();
        estados_iniciales = new ArrayList<String>();
	estados_iniciales = new ArrayList<String>();	
	comp_codigo = new Hashtable<String, String>();
	eventos_por_automata = new ArrayList<ArrayList<String>>();
	estados_por_automata  = new ArrayList<ArrayList<String>>();
	comps_por_automata  = new ArrayList<ArrayList<String>>();
	trans_por_automata = new ArrayList<ArrayList<String>>();
	
        :} programa {: 

	System.out.println("Analisis finalizado " + contador_maquinas); 
	System.out.println("Numero de automatas declarados: " +maquinas.size());

	//Aqui se ejecutan las maquinas
	String e = "";
	for(int i = 0; i < maquinas.size(); i++){
		actual = maquinas.get(i);
		System.out.println("Máquina de Moore: "+ actual.getName());
		for(int k = 0; k < eventos_por_automata.get(i).size() ; k++){
			actual.addEvent(eventos_por_automata.get(i).get(k));
			e += eventos_por_automata.get(i).get(k)+" ";
		}
		System.out.println("Eventos de entrada: " + e);
		e = "";
		actual.ejecutar();
	}
	:} ;

programa ::= dec_comp {: maquinas = new ArrayList<MaquinaMoore>();   :} dec_automata ;

dec_comp ::= CMP:com codigo:code {:  comp_codigo.put(com, code); :} dec_comp
		| CMP:com codigo:code {:  comp_codigo.put(com, code); :} ;

dec_automata ::= automata {: ++contador_maquinas; :} dec_automata
		| automata {: ++contador_maquinas; :};

codigo ::= ALM_OP CODIGO:code ALM_CL {: RESULT=code; :};

//Producciones de error de codigo
codigo ::= ALM_OP CODIGO {: System.out.println("Necesita cerrar con una '#' la sentencia "); :};
codigo ::= CODIGO ALM_OP {: System.out.println("Necesita abrir con una '#' la sentencia "); :};
/*******************************/

automata ::= MOORE ID:id {: 
  	     machine = new MaquinaMoore(id);
	     :} cuerpo_automata ;

cuerpo_automata ::= LLCORCH_OP estados estado_ini alf_in alf_out comportamientos 

transicion LLCORCH_CL {: maquinas.add(machine); 
			
			:} ;

estados ::=  ESTADOS dec_estados PUNTO_COMA ;

//Produccion de error estados
estados ::=  ESTADOS dec_estados {: System.out.println("Falta ';' al final de la sentencia"); :} ;
/****************************/

dec_estados ::= ID:id {: estados.add(id); :} COMA dec_estados
		| ID:id {:  estados.add(id); 
			estados_por_automata.add(estados); 
			estados = new ArrayList<String>(); :} ;

//Producción de error dec_estados
dec_estados ::= ID dec_estados {:error+="Separe los estados con ','\n";
				 System.out.println("Separe los estados con ','"); :} ;
/********************************/

estado_ini ::= ESTADO_INI ID:id {:  estado_inicial=id; 
				estados_iniciales.add(estado_inicial); :} PUNTO_COMA ;
				
//Produccion de error estado_ini
estado_ini ::= ESTADO_INI ID {: System.out.println("Falta ';' al final de la sentencia"); :} ;
/*********************/

alf_in ::= ALF_IN dec_alf_in PUNTO_COMA ;

//Produccion error alf_in
alf_out ::= ALF_IN dec_alf_in {: System.out.println("Falta ';' al final de la sentencia"); :} ;
/************************************/

dec_alf_in ::= ID:id {:     eventos.add(id);  :} COMA dec_alf_in
		| ID:id {:  eventos.add(id); eventos_por_automata.add(eventos);
			    eventos = new ArrayList<String>();  :} ;

//Produccion de error de dec_alf_in
dec_alf_in ::= ID dec_alf_in {: System.out.println("Separe los elementos del alfabeto con ','"); :} ;
/************************************/

alf_out ::= ALF_OUT dec_alf_out PUNTO_COMA {: :} ;

//Produccion error alf_out
alf_out ::= ALF_OUT dec_alf_out {: System.out.println("Falta ';' al final de la sentencia"); :} ;
/************************************/

dec_alf_out ::= CMP:id {:    comps.add(id);  :} COMA dec_alf_out
		| CMP:id {:  comps.add(id); comps_por_automata.add(comps);
			     comps = new ArrayList<>();  :} ;

//Produccion de error de dec_alf_out
dec_alf_out ::= CMP dec_alf_out {: System.out.println("Separe los elementos del alfabeto con ','"); :} ;
/************************************/

comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos PUNTO_COMA {: machine.addEstadosToMachine(); :} LLCORCH_CL ;

dec_comportamientos ::= comp_def:tupla 
	{: 
		if(!comps_estado.contains(tupla)){
			comps_estado.add(tupla);
		}else{
			fallo = true;
			error += "ERROR: Comportamiento "+ tupla + " ya está declarado\n";			
		}
		 
	:} 				COMA dec_comportamientos 
		| comp_def:tupla 
	{: 
		if(!comps_estado.contains(tupla)){
			comps_estado.add(tupla);
			comps_por_automata.add(comps_estado);
			comps_estado = new ArrayList<String>();
		}else{
			fallo = true;
			error += "ERROR: Comportamiento "+ tupla + " ya está declarado\n";			
		}
	:} ;

comp_def ::= LLPARENT_OP ID:id COMA CMP:comp LLPARENT_CL 
	{:
			RESULT=id+"-"+comp+"-"+comp_codigo.get(comp);
			//comp_codigo.get(comp) Devuelve null si no hay codigo asociado
			if(!comp_codigo.get(comp).equals(null)){
				
				Runnable entr_state = () -> {
					System.out.println("Entro al estado "+id);
				};
				Runnable sal_state = () -> {
					try {
						js.eval(comp_codigo.get(comp));
					} catch (ScriptException ex) {
						System.out.println("Hubo un error:"+ex);
					}
					System.out.println("Salgo del estado "+id);
				};
				Runnable final_state = () -> {
					System.out.println("El ultimo estado "+id);
					try {
						js.eval(comp_codigo.get(comp));
					} catch (ScriptException ex) {
						System.out.println("Hubo un error:"+ex);
					}
				};
								
				if(id.equals(estado_inicial)){
					machine.addState(id,entr_state,sal_state,final_state);
				}else{
					machine.cargarEstados(entr_state,sal_state,final_state, id);
				}
				
				
			}else{
				System.out.println("No se ha asociado ningún código de comportamiento al autómata");
			}

	:} ;

//Producciones de error de comp_def
comp_def ::= LLPARENT_OP CMP LLPARENT_CL {: System.out.println("Necesita declarar un estado"); :} ;
comp_def ::= LLPARENT_OP ID COMA LLPARENT_CL {: System.out.println("Necesita declarar un comportamiento para el estado"); :} ;
comp_def ::= LLPARENT_OP ID CMP LLPARENT_CL {: System.out.println("Necesita separar estado y comportamiento con una ','"); :} ;
//////////////////////////////////


transicion ::= TRANS LLCORCH_OP dec_transicion PUNTO_COMA LLCORCH_CL ;

dec_transicion ::= transicion_def:tupla 
	{: 
		if(!transiciones.contains(tupla)){
			transiciones.add(tupla);
		}else{
			fallo = true;
			error += "ERROR: Transición "+ tupla + " ya está declarada\n";
		}

	:} 
				   	COMA  dec_transicion 
		| transicion_def:tupla 
	{: 
		if(!transiciones.contains(tupla)){
			transiciones.add(tupla); trans_por_automata.add(transiciones); 			
			transiciones = new ArrayList<String>(); 
		}else{
			fallo = true;
			error += "ERROR: Transición "+ tupla + " ya está declarada\n";
		}		

	:} ; 

transicion_def ::= LLPARENT_OP ID:estado_in COMA ID:evento COMA ID:estado_out LLPARENT_CL {: 								RESULT=estado_in+"-"+evento+"-"+estado_out; 			   						machine.addTransition(evento,estado_in,estado_out); :} ;

//Producciones de error de transicion_def
transicion_def ::= LLPARENT_OP ID ID COMA ID LLPARENT_CL {: System.out.println("Ha olvidado una ','"); :} ;
transicion_def ::= LLPARENT_OP ID COMA ID ID LLPARENT_CL {: System.out.println("Ha olvidado una ','"); :} ;
/****************************************/

