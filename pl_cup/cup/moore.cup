/* ----------------------Seccion de declaraciones package e imports--------------------*/
import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;
//Librerias utilizadas para ejecutar codigo JavaScript almacenado en un String
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

/* ----------------------Seccion componentes de codigo de usuario --------------------*/
action code {: 
	MaquinaMoore machine;
	int contador;
        ArrayList<MaquinaMoore> maquinas;
	ArrayList<String> estados,eventos,comps;
	Hashtable<String, String> comp_codigo;
	String estado_inicial;
	ScriptEngineManager script;
	ScriptEngine js;
:}
/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/
non terminal aux, programa, dec_comp, automata, dec_automata, cuerpo_automata, estados, dec_estados, estado_ini, alf_in, dec_alf_in, alf_out, dec_alf_out, transicion, dec_transicion, comportamientos, dec_comportamientos;
non terminal String codigo;
non terminal String comp_def;
non terminal String transicion_def;

terminal String CMP;
terminal String CODIGO; 
terminal String MOORE;
terminal String ID;
terminal String LLCORCH_OP;
terminal String LLCORCH_CL;
terminal String ESTADOS;
terminal String ESTADO_INI;
terminal String ALF_IN;
terminal String ALF_OUT;
terminal String TRANS;
terminal String COMPORTAMIENTO;
terminal String COMA;
terminal String PUNTO_COMA;
terminal String LLPARENT_OP;
terminal String LLPARENT_CL;
terminal String ALM_OP;
terminal String ALM_CL;

/* -------------Declaracion de precedencias -----------*/

/*public static void main(String[] args) throws IOException {
		ScriptEngineManager script = new ScriptEngineManager();

		ScriptEngine js = script.getEngineByName("JavaScript");
	try {
		// evaluamos lineas java script
		js.eval("print('HOLA MUNDO ')");
	} catch (ScriptException ex) {
		System.out.println("Hubo un error:"+ex);
	}
}*/

/* --------------Declaracion de la gramatica -----------*/

aux ::= {: script = new ScriptEngineManager(); js = script.getEngineByName("JavaScript"); contador = 0; estados = new ArrayList<String>(); eventos = new ArrayList<String>(); comps = new ArrayList<String>(); comp_codigo = new Hashtable<String, String>(); :} programa 
	{: 
			System.out.println("Analisis finalizado" + contador); 
			/*
			 * Holi, si estas leyendo esto es porque quieres continuar con la practica, te explico:
			 * Lo primero, no he tenido en cuenta ninguna clase de control de error, te pongo un ejemplo: Si en comp_def, declaras un comportamiento sin codigo asociado, deberia petar :)
			 * Lo segundo, el codigo que se encuentra despues de este comentario, de ninguna forma deberia ser la version definitiva, esto lo he hecho para asegurarme que funciona y por 
			 * tanto necesita varias mejoras, la más basica, es pedir la entrada al usuario, y definir una entrada por cada automata de la lista. Suerte! ;) fdo: Alejandro. 	
			 */
			String entrada[] = {"e1","e2","e3"};
			MaquinaMoore actual;
			for(int i = 0; i < maquinas.size(); i++){
				actual = maquinas.get(i);
				for(int j = 0; j < entrada.length; j++){
					actual.addEvent(entrada[i]);
				}
				actual.ejecutar();
			}
	:} ;
programa ::= dec_comp {: maquinas = new ArrayList<MaquinaMoore>(); :} dec_automata ;
dec_comp ::= CMP:com codigo:code {: System.out.println("Se obtiene Comportamiendo con id: " + com + " y codigo: " + code); comp_codigo.put(com, code); :} dec_comp
		| CMP:com codigo:code {: System.out.println("Se obtiene Comportamiendo con id: " + com + " y codigo: " + code); comp_codigo.put(com, code); :} ;
dec_automata ::= automata {: System.out.println("Maquina identificada! n_maquinas: " + ++contador); :} dec_automata
		| automata {: System.out.println("Maquina identificada! n_maquinas: " + ++contador); :};
codigo ::= ALM_OP CODIGO:code ALM_CL {: RESULT=code; :};
automata ::= MOORE ID:id {: System.out.println("Nombre maquina: " + id);  machine = new MaquinaMoore(id); :} cuerpo_automata ;
cuerpo_automata ::= LLCORCH_OP estados estado_ini alf_in alf_out comportamientos transicion LLCORCH_CL {: maquinas.add(machine); :} ;
estados ::=  ESTADOS dec_estados PUNTO_COMA ;
dec_estados ::= ID:id {: System.out.println("Se obtiene estado: "+id); estados.add(id); :} COMA dec_estados
		| ID:id {: System.out.println("Se obtiene estado: "+id); estados.add(id); :} ;
estado_ini ::= ESTADO_INI ID:id {: System.out.println("Se obtiene estado inicial: "+id); estado_inicial=id; :} PUNTO_COMA ;
alf_in ::= ALF_IN dec_alf_in PUNTO_COMA ;
dec_alf_in ::= ID:id {: System.out.println("Se obtiene transicion: "+id); eventos.add(id); /*Añadir a moore la transicion*/ :} COMA dec_alf_in
		| ID:id {: System.out.println("Se obtiene transicion: "+id); eventos.add(id); /*Añadir a moore la transicion*/ :} ;
alf_out ::= ALF_OUT dec_alf_out PUNTO_COMA ;
dec_alf_out ::= CMP:id {: System.out.println("Se obtiene comportamiento: "+id); comps.add(id); /*Añadir a moore la transicion*/ :} COMA dec_alf_out
		| CMP:id {: System.out.println("Se obtiene comportamiento: "+id); comps.add(id); /*Añadir a moore la transicion*/ :} ;
comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos PUNTO_COMA LLCORCH_CL ;
dec_comportamientos ::= comp_def:tupla {: System.out.println("Se obtiene tupla: "+tupla); :} COMA dec_comportamientos 
		| comp_def:tupla {: System.out.println("Se obtiene tupla: "+tupla); :} ;
comp_def ::= LLPARENT_OP ID:id COMA CMP:comp LLPARENT_CL 
	{: 
			RESULT=id+"-"+comp+"-"+comp_codigo.get(comp);
			/*comp_codigo.get(comp) Devuelve null si no hay codigo asociado*/ 
			Runnable entr_state = () -> {
				System.out.println("Entro al estado "+id);
			};
			Runnable sal_state = () -> {
				try {
					js.eval(comp_codigo.get(comp));
				} catch (ScriptException ex) {
					System.out.println("Hubo un error:"+ex);
				}
				System.out.println("Salgo del estado "+id);
			};
			Runnable final_state = () -> {
				System.out.println("El ultimo estado "+id);
				try {
					js.eval(comp_codigo.get(comp));
				} catch (ScriptException ex) {
					System.out.println("Hubo un error:"+ex);
				}
			};
			machine.addState(id,entr_state,sal_state,final_state);
	:};
transicion ::= TRANS LLCORCH_OP dec_transicion PUNTO_COMA LLCORCH_CL ;
dec_transicion ::= transicion_def:tupla {: System.out.println("Se obtiene tupla1: "+tupla); :} COMA dec_transicion 
		| transicion_def:tupla {: System.out.println("Se obtiene tupla1: "+tupla); :} ;

transicion_def ::= LLPARENT_OP ID:estado_in COMA ID:evento COMA ID:estado_out LLPARENT_CL {: RESULT=estado_in+"-"+evento+"-"+estado_out; machine.addTransition(evento,estado_in,estado_out); :} ;
	

