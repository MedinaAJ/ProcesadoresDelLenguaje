
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 09 14:06:54 CET 2019
//----------------------------------------------------

import java.io.*;
import java.util.Scanner;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.lang.Exception;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 09 14:06:54 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\026\002\000\002\002\004\000\002\002" +
    "\004\000\002\027\002\000\002\003\005\000\002\030\002" +
    "\000\002\004\006\000\002\004\004\000\002\031\002\000" +
    "\002\006\005\000\002\006\003\000\002\023\005\000\002" +
    "\023\004\000\002\023\004\000\002\032\002\000\002\005" +
    "\006\000\002\007\012\000\002\010\005\000\002\010\004" +
    "\000\002\033\002\000\002\011\006\000\002\011\003\000" +
    "\002\011\004\000\002\034\002\000\002\012\006\000\002" +
    "\012\004\000\002\013\005\000\002\013\004\000\002\035" +
    "\002\000\002\014\006\000\002\014\003\000\002\014\004" +
    "\000\002\015\005\000\002\015\004\000\002\036\002\000" +
    "\002\016\006\000\002\016\003\000\002\016\004\000\002" +
    "\037\002\000\002\021\010\000\002\040\002\000\002\021" +
    "\007\000\002\021\006\000\002\041\002\000\002\021\007" +
    "\000\002\042\002\000\002\021\007\000\002\043\002\000" +
    "\002\022\006\000\002\022\003\000\002\024\007\000\002" +
    "\024\005\000\002\024\006\000\002\024\006\000\002\017" +
    "\007\000\002\044\002\000\002\020\006\000\002\020\003" +
    "\000\002\025\011\000\002\025\010\000\002\025\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\004\001\001\002\000\004\002\163\001" +
    "\002\000\004\004\007\001\002\000\004\002\000\001\002" +
    "\000\006\005\154\024\153\001\002\000\004\006\ufffe\001" +
    "\002\000\004\006\013\001\002\000\006\002\ufff7\006\ufff9" +
    "\001\002\000\004\007\015\001\002\000\004\002\ufffd\001" +
    "\002\000\004\010\ufff3\001\002\000\004\010\017\001\002" +
    "\000\004\012\021\001\002\000\006\002\ufff2\006\ufff2\001" +
    "\002\000\004\007\142\001\002\000\004\013\024\001\002" +
    "\000\004\014\030\001\002\000\004\007\025\001\002\000" +
    "\006\014\uffe8\021\uffea\001\002\000\004\021\027\001\002" +
    "\000\004\014\uffe9\001\002\000\004\007\134\001\002\000" +
    "\004\015\032\001\002\000\004\004\124\001\002\000\006" +
    "\010\034\017\036\001\002\000\004\022\041\001\002\000" +
    "\004\016\070\001\002\000\006\010\037\022\041\001\002" +
    "\000\004\022\041\001\002\000\010\011\uffd0\020\uffd2\021" +
    "\uffd0\001\002\000\006\004\047\007\046\001\002\000\004" +
    "\021\043\001\002\000\004\011\uffd9\001\002\000\004\011" +
    "\045\001\002\000\004\016\uffd8\001\002\000\006\004\052" +
    "\020\051\001\002\000\004\023\050\001\002\000\010\011" +
    "\uffce\020\uffce\021\uffce\001\002\000\006\004\054\023\055" +
    "\001\002\000\004\023\053\001\002\000\010\011\uffcc\020" +
    "\uffcc\021\uffcc\001\002\000\004\023\056\001\002\000\010" +
    "\011\uffcd\020\uffcd\021\uffcd\001\002\000\010\011\uffcf\020" +
    "\uffcf\021\uffcf\001\002\000\004\020\060\001\002\000\004" +
    "\022\041\001\002\000\006\011\uffd1\021\uffd1\001\002\000" +
    "\006\011\uffd4\021\063\001\002\000\006\011\uffdb\016\uffd7" +
    "\001\002\000\004\011\065\001\002\000\004\016\uffd3\001" +
    "\002\000\004\011\067\001\002\000\004\016\uffda\001\002" +
    "\000\004\010\073\001\002\000\004\011\072\001\002\000" +
    "\006\002\ufff1\006\ufff1\001\002\000\004\022\074\001\002" +
    "\000\004\007\104\001\002\000\004\021\102\001\002\000" +
    "\006\020\uffca\021\uffc8\001\002\000\004\020\100\001\002" +
    "\000\004\022\074\001\002\000\004\021\uffc9\001\002\000" +
    "\004\011\103\001\002\000\004\011\uffcb\001\002\000\006" +
    "\007\106\020\105\001\002\000\004\007\112\001\002\000" +
    "\004\020\107\001\002\000\004\007\110\001\002\000\004" +
    "\023\111\001\002\000\006\020\uffc6\021\uffc6\001\002\000" +
    "\006\007\113\020\114\001\002\000\004\023\117\001\002" +
    "\000\004\007\115\001\002\000\004\023\116\001\002\000" +
    "\006\020\uffc7\021\uffc7\001\002\000\006\020\uffc5\021\uffc5" +
    "\001\002\000\004\021\121\001\002\000\004\011\uffd6\001" +
    "\002\000\004\011\123\001\002\000\004\016\uffd5\001\002" +
    "\000\014\004\124\010\uffdd\017\uffdd\020\uffdf\021\uffdd\001" +
    "\002\000\010\010\uffe0\017\uffe0\021\126\001\002\000\006" +
    "\010\uffe1\017\uffe1\001\002\000\004\020\131\001\002\000" +
    "\010\010\uffdc\017\uffdc\021\uffdc\001\002\000\004\004\124" +
    "\001\002\000\010\010\uffde\017\uffde\021\uffde\001\002\000" +
    "\006\015\uffe6\021\141\001\002\000\012\007\134\015\uffe3" +
    "\020\uffe5\021\uffe3\001\002\000\006\015\uffe2\021\uffe2\001" +
    "\002\000\004\020\137\001\002\000\004\007\134\001\002" +
    "\000\006\015\uffe4\021\uffe4\001\002\000\004\015\uffe7\001" +
    "\002\000\012\007\142\013\uffec\020\uffee\021\uffec\001\002" +
    "\000\006\013\uffef\021\144\001\002\000\004\013\ufff0\001" +
    "\002\000\006\013\uffeb\021\uffeb\001\002\000\004\020\147" +
    "\001\002\000\004\007\142\001\002\000\006\013\uffed\021" +
    "\uffed\001\002\000\004\006\013\001\002\000\004\002\ufff8" +
    "\001\002\000\004\005\161\001\002\000\004\025\160\001" +
    "\002\000\006\004\ufffc\006\ufffa\001\002\000\004\004\007" +
    "\001\002\000\004\006\ufffb\001\002\000\006\004\ufff4\006" +
    "\ufff4\001\002\000\010\004\ufff5\006\ufff5\025\162\001\002" +
    "\000\006\004\ufff6\006\ufff6\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\002\003\026\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\004\023\154\001\001\000\004\027\010\001\001\000" +
    "\006\005\011\006\013\001\001\000\004\031\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\015\001" +
    "\001\000\004\007\017\001\001\000\004\010\021\001\001" +
    "\000\002\001\001\000\004\011\142\001\001\000\004\012" +
    "\022\001\001\000\004\013\030\001\001\000\002\001\001" +
    "\000\004\034\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\132\001\001\000\004\015\032\001\001" +
    "\000\004\016\124\001\001\000\004\021\034\001\001\000" +
    "\006\022\117\024\037\001\001\000\004\017\070\001\001" +
    "\000\006\022\041\024\037\001\001\000\006\022\061\024" +
    "\037\001\001\000\004\043\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\060\024\037\001" +
    "\001\000\002\001\001\000\004\042\063\001\001\000\004" +
    "\037\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\074\025\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\076" +
    "\001\001\000\002\001\001\000\006\020\100\025\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\127\036\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\134\035\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\144\033\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\147\001\001\000\002\001\001\000" +
    "\006\005\011\006\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\155\001\001\000" +
    "\004\004\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





	public void report_error(String message, Object info) {
   
        /* Crea un StringBuffer llamado 'm' con el string 'Error' en él. */

        StringBuffer m = new StringBuffer("Error");
   
        /* Chequea si la información pasada al método es del mismo
           tipo que el tipo java_cup.runtime.Symbol. */

        if (info instanceof java_cup.runtime.Symbol) {

            /* Declara un objeto 's' del tipo java_cup.runtime.Symbol con la
               información que hay en el objeto info que está siendo convertido
               como un objeto java_cup.runtime.Symbol. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Chequea si el número de línea en la entrada es mayor o
               igual que cero. */
            if (s.left >= 0) {                
                /* Añade al final del mensaje de error StringBuffer
                   el número de línea del error en la entrada. */
                m.append(" en la linea "+(s.left+1));   
                /* Chequea si el número de columna en la entrada es mayor
                   o igual que cero. */
                if (s.right >= 0)                    
                    /* Añade al final del mensaje de error StringBuffer
                       el número de columna del error en la entrada. */
                    m.append(", columna "+(s.right+1));
            }
        }
        /* Añade al final del mensaje de error StringBuffer creado en
           este método el mensaje que fue pasado a este método. */
        m.append(" : "+message);
   
        /* Imprime los contenidos del StringBuffer 'm', que contiene
           el mensaje de error. */
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void syntax_error(Symbol s){
        System.out.println("Error recuperable de sintaxis: "+s.value+" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error no recuperable de sintaxis: "+s.value+" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 

	boolean fallo;
	String error;
	MaquinaMoore machine, actual;
	int contador_maquinas;
        ArrayList<MaquinaMoore> maquinas;
	ArrayList<String> estados, eventos, comps, transiciones, comps_estado, estados_iniciales;
	ArrayList<ArrayList<String>> estados_por_automata, eventos_por_automata, comps_por_automata, trans_por_automata, comps_est_por_automata;
	Hashtable<String, String> comp_codigo;
	String estado_inicial;
	ScriptEngineManager script;
	ScriptEngine js;



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // transicion_def ::= LLPARENT_OP ID COMA ID ID LLPARENT_CL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
							   fallo = true;
							   error += "In line: "+((idleft)+1)+"Ha olvidado una ','\n";
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_def",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // transicion_def ::= LLPARENT_OP ID ID COMA ID LLPARENT_CL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
							   fallo = true;
							   error += "In line: "+((idleft)+1)+"Ha olvidado una ','\n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_def",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // transicion_def ::= LLPARENT_OP ID COMA ID COMA ID LLPARENT_CL 
            {
              String RESULT =null;
		int estado_inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int estado_inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String estado_in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eventoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eventoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String evento = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int estado_outleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int estado_outright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String estado_out = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 								RESULT=estado_in+"-"+evento+"-"+estado_out; 			   						machine.addTransition(evento,estado_in,estado_out); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_def",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_transicion ::= transicion_def 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		if(!transiciones.contains(tupla)){
			transiciones.add(tupla); trans_por_automata.add(transiciones); 			
			transiciones = new ArrayList<String>(); 
		}else{
			fallo = true;
			error += "In line: "+((tuplaleft)+1)+"ERROR: Transición "+ tupla + " ya está declarada\n";
		}		

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_transicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_transicion ::= transicion_def NT$14 COMA dec_transicion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_transicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$14 ::= 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
		if(!transiciones.contains(tupla)){
			transiciones.add(tupla);
		}else{
			fallo = true;
			error += "In line: "+((tuplaleft)+1)+"ERROR: Transición "+ tupla + " ya está declarada\n";
		}

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // transicion ::= TRANS LLCORCH_OP dec_transicion PUNTO_COMA LLCORCH_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comp_def ::= LLPARENT_OP ID CMP LLPARENT_CL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
						fallo = true;
						error += "In line: "+((idleft)+1)+" Necesita separar estado y comportamiento con una ','\n";			
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_def",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comp_def ::= LLPARENT_OP ID COMA LLPARENT_CL 
            {
              String RESULT =null;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
						     fallo = true;
						     error += "In line: "+((comaleft)+1)+" Necesita declarar un comportamiento para el estado \n";


              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_def",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comp_def ::= LLPARENT_OP CMP LLPARENT_CL 
            {
              String RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cmp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fallo = true;
						error += "In line: "+((cmpleft)+1)+" Necesita declarar un estado \n";
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_def",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comp_def ::= LLPARENT_OP ID COMA CMP LLPARENT_CL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT=id+"-"+comp+"-"+comp_codigo.get(comp);
                        if(estados.contains(id)){
                            fallo = true;
			    error += "In line: "+((idleft)+1)+" ERROR: El estado " + id + " no esta declarado \n";
                        }
			if(!comp_codigo.get(comp).equals(null)){
				
				
				Runnable sal_state = () -> {
					try {
						js.eval(comp_codigo.get(comp));
					} catch (ScriptException ex) {
						System.out.println("El codigo asociado al estado "+id+" es incorrecto, ERROR:"+ex);
					}
					System.out.println("Salgo del estado "+id);
				};
				Runnable final_state = () -> {
					System.out.println("El ultimo estado "+id);
					try {
						js.eval(comp_codigo.get(comp));
					} catch (ScriptException ex) {
						System.out.println("El codigo asociado al estado "+id+" es incorrecto, ERROR:"+ex);
					}
				};
								
				if(id.equals(estado_inicial)){
					Runnable entr_state = () -> {
						System.out.println(" ");
					};
					machine.addState(id,entr_state,sal_state,final_state);
				}else{
					Runnable entr_state = () -> {
						System.out.println("Entro al estado"+id);
					};
					machine.cargarEstados(entr_state,sal_state,final_state, id);
				}
				
				
			}else{
				fallo = true;
				error += "In line: "+((idleft)+1)+"ERROR: No se ha asociado ningún código de comportamiento al autómata \n";
			}

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_def",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_comportamientos ::= comp_def 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		if(!comps_estado.contains(tupla)){
			comps_estado.add(tupla);
			comps_por_automata.add(comps_estado);
			comps_estado = new ArrayList<String>();
		}else{
			fallo = true;
			error += "In line: "+((tuplaleft)+1)+" ERROR: Comportamiento "+ tupla + " ya está declarado\n";			
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comportamientos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_comportamientos ::= comp_def NT$13 COMA dec_comportamientos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comportamientos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
		if(!comps_estado.contains(tupla)){
			comps_estado.add(tupla);
		}else{
			fallo = true;
			error += "In line: "+((tuplaleft)+1)+"ERROR: Comportamiento "+ tupla + " ya está declarado\n";			
		}
		 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos NT$12 LLCORCH_CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comportamientos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$12 ::= 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 fallo = true;
                                                                     error += "In line: "+((tuplaleft)+1)+"ERROR: Falta un punto y coma\n";
                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comportamientos ::= LLCORCH_OP dec_comportamientos PUNTO_COMA NT$11 LLCORCH_CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comportamientos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$11 ::= 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 fallo = true;
                                                                 error += "In line: "+((tuplaleft)+1)+"ERROR: Falta la palabra reservada comportamiento\n";
                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos PUNTO_COMA 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 fallo = true;
                                                                                error += "In line: "+((tuplaleft)+1)+"ERROR: Falta una llave de cierre\n";	 
                                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comportamientos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comportamientos ::= COMPORTAMIENTO dec_comportamientos PUNTO_COMA NT$10 LLCORCH_CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comportamientos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 fallo = true;
                                                                     error += "In line: "+((tuplaleft)+1)+"ERROR: Falta una llave de apertura\n";	 
                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos PUNTO_COMA NT$9 LLCORCH_CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comportamientos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$9 ::= 
            {
              Object RESULT =null;
 machine.addEstadosToMachine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_alf_out ::= CMP dec_alf_out 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				   fallo = true;
				   error += "In line: "+((idleft)+1)+"Separe los comportamientos del alfabeto con ',' \n";
					
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_out",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_alf_out ::= CMP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(comp_codigo.get(id).equals(null)){
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El comportamiento "+id+" no tiene codigo declarado \n";
                            }
                            if(!comps.contains(id)){
                                comps.add(id); 
                                comps_por_automata.add(comps);
                                comps = new ArrayList<String>();
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El comportamiento "+id+" ya esta declarado \n";
                            }
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_out",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_alf_out ::= CMP NT$8 COMA dec_alf_out 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_out",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            if(comp_codigo.get(id).equals(null)){
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El comportamiento "+id+" no tiene codigo declarado \n";
                            }
                            if(!comps.contains(id)){
                                comps.add(id); 
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El comportamiento "+id+" ya esta declarado \n";
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // alf_out ::= ALF_OUT dec_alf_out 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				   fallo = true;
				   error += "In line: "+((idleft)+1)+" Falta ';' al final de la sentencia',' \n";
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alf_out",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // alf_out ::= ALF_OUT dec_alf_out PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alf_out",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_alf_in ::= ID dec_alf_in 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
				   fallo = true;
				   error += "In line: "+((idleft)+1)+" separe los elementos del alfabeto con ',' \n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_in",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_alf_in ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if(!eventos.contains(id)){
                                eventos.add(id); 
                                eventos_por_automata.add(eventos);
                                eventos = new ArrayList<String>();
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" La transicion "+id+" ya esta declarada \n";
                            }
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_in",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_alf_in ::= ID NT$7 COMA dec_alf_in 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_in",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            if(!eventos.contains(id)){
                                eventos.add(id); 
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" La transicion "+id+" ya esta declarada \n";
                            }                      
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // alf_in ::= ALF_IN dec_alf_in 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				fallo = true;
				error += "In line: "+((idleft)+1)+"Falta ';' al final de la sentencia \n";
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alf_in",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // alf_in ::= ALF_IN dec_alf_in PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alf_in",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estado_ini ::= ESTADO_INI ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				fallo = true;
				error += "In line: "+((idleft)+1)+"Falta ';' al final de la sentencia \n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_ini",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estado_ini ::= ESTADO_INI ID NT$6 PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_ini",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                                if(!estados.contains(id)){
                                    estado_inicial=id; 
                                    estados_iniciales.add(estado_inicial); 
                                }else{
                                    fallo = true;
                                    error += "In line: "+((idleft)+1)+" El estado inicial "+id+" no esta declarado en la lista de estados\n";
                                }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_estados ::= ID dec_estados 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				  fallo = true;
				  error += "In line: "+((idleft)+1)+"Separe los estados con ',' \n";
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_estados",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_estados ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!estados.contains(id)){
                                estados.add(id);
                                estados_por_automata.add(estados); 
                                estados = new ArrayList<String>();
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El estado "+id+" ya esta declarado \n";
                            }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_estados",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_estados ::= ID NT$5 COMA dec_estados 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_estados",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(!estados.contains(id)){
                            estados.add(id);
                       }else{
                            fallo = true;
                            error += "In line: "+((idleft)+1)+" El estado "+id+" ya esta declarado \n";
                       }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estados ::= ESTADOS dec_estados 
            {
              Object RESULT =null;
		int estleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int estright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String est = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			            fallo = true;
				    error += "In line: "+((estleft)+1)+"Falta ';' al final de la sentencia \n";
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estados ::= ESTADOS dec_estados PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo_automata ::= LLCORCH_OP estados estado_ini alf_in alf_out comportamientos transicion LLCORCH_CL 
            {
              Object RESULT =null;
		 maquinas.add(machine); 
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_automata",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // automata ::= MOORE ID NT$4 cuerpo_automata 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("automata",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
  	     machine = new MaquinaMoore(id);
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= CODIGO ALM_CL 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				 fallo = true;
		                 error += "In line: "+((codeleft)+1)+"Necesita abrir con una '#' la sentencia  \n"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= ALM_OP CODIGO 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			         fallo = true;
		                 error += "In line: "+((codeleft)+1)+"Necesita cerrar con una '#' la sentencia \n";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= ALM_OP CODIGO ALM_CL 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=code; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_automata ::= automata 
            {
              Object RESULT =null;
		 ++contador_maquinas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_automata",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_automata ::= automata NT$3 dec_automata 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_automata",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
 ++contador_maquinas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_comp ::= CMP codigo 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  comp_codigo.put(com, code); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_comp ::= CMP codigo NT$2 dec_comp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  comp_codigo.put(com, code); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= dec_comp NT$1 dec_automata 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 maquinas = new ArrayList<MaquinaMoore>();   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= aux EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // aux ::= NT$0 programa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	

	System.out.println("Analisis finalizado"); 

	if(fallo){
		System.out.println("Analisis incorrecto");
		System.out.println(error);
		System.exit(1);

	}else{
	
		System.out.println("Numero de automatas declarados: " +maquinas.size());

		//Aqui se ejecutan las maquinas
		String e = "";
		for(int i = 0; i < maquinas.size(); i++){
			actual = maquinas.get(i);
			System.out.println("Máquina de Moore: "+ actual.getName());
			for(int k = 0; k < eventos_por_automata.get(i).size() ; k++){
				actual.addEvent(eventos_por_automata.get(i).get(k));
				e += eventos_por_automata.get(i).get(k)+" ";
			}
			System.out.println("Eventos de entrada: " + e);
			e = "";
			actual.ejecutar();
		}
	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aux",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 

	fallo = false;
	error = "";
	script = new ScriptEngineManager(); 
	js = script.getEngineByName("JavaScript"); 
	contador_maquinas = 0; 
	estados = new ArrayList<String>();
        eventos = new ArrayList<String>();
        comps = new ArrayList<String>(); 
	transiciones= new ArrayList<String>();
	comps_estado = new ArrayList<String>();
        estados_iniciales = new ArrayList<String>();
	estados_iniciales = new ArrayList<String>();	
	comp_codigo = new Hashtable<String, String>();
	eventos_por_automata = new ArrayList<ArrayList<String>>();
	estados_por_automata  = new ArrayList<ArrayList<String>>();
	comps_por_automata  = new ArrayList<ArrayList<String>>();
	trans_por_automata = new ArrayList<ArrayList<String>>();
	
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

