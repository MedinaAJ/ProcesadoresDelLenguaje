/* ----------------------Seccion de declaraciones package e imports--------------------*/
package plmoore;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;

/* ----------------------Seccion componentes de codigo de usuario --------------------*/
parser code {:


	public void report_error(String message, Object info) {
   
        /* Crea un StringBuffer llamado 'm' con el string 'Error' en él. */

        StringBuffer m = new StringBuffer("Error");
   
        /* Chequea si la información pasada al método es del mismo
           tipo que el tipo java_cup.runtime.Symbol. */

        if (info instanceof java_cup.runtime.Symbol) {

            /* Declara un objeto 's' del tipo java_cup.runtime.Symbol con la
               información que hay en el objeto info que está siendo convertido
               como un objeto java_cup.runtime.Symbol. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Chequea si el número de línea en la entrada es mayor o
               igual que cero. */
            if (s.left >= 0) {                
                /* Añade al final del mensaje de error StringBuffer
                   el número de línea del error en la entrada. */
                m.append(" en la linea "+(s.left+1));   
                /* Chequea si el número de columna en la entrada es mayor
                   o igual que cero. */
                if (s.right >= 0)                    
                    /* Añade al final del mensaje de error StringBuffer
                       el número de columna del error en la entrada. */
                    m.append(", columna "+(s.right+1));
            }
        }
        /* Añade al final del mensaje de error StringBuffer creado en
           este método el mensaje que fue pasado a este método. */
        m.append(" : "+message);
   
        /* Imprime los contenidos del StringBuffer 'm', que contiene
           el mensaje de error. */
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void syntax_error(Symbol s){
        System.out.println("Error recuperable de sintaxis: "+s.value+" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error no recuperable de sintaxis: "+s.value+" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

   
:}

action code {: 
	MaquinaDeMoore machine;
	int contador=0;
        ArrayList<MaquinaDeMoore> maquinas = new ArrayList<MaquinaDeMoore>();;
	Hashtable<String, String> comp_codigo = new Hashtable<String, String>();
        String fallos_ejecucion = "";
        boolean continuar = true;
:}
/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/
non terminal programa, dec_comp, dec_automata, cuerpo_automata, estados, dec_estados, estado_ini, alf_in, dec_alf_in, alf_out, dec_alf_out, transicion, dec_transicion, comportamientos, dec_comportamientos;
non terminal MaquinaDeMoore automata;
non terminal String codigo;
non terminal String comp_def;
non terminal String transicion_def;

terminal String CMP, CODIGO, MOORE, ID, LLCORCH_OP, LLCORCH_CL, ESTADOS, ESTADO_INI, ALF_IN, ALF_OUT, TRANS, COMPORTAMIENTO, COMA, PUNTO_COMA, LLPARENT_OP, LLPARENT_CL, ALM_OP, ALM_CL;
/* -------------Declaracion de precedencias -----------*/


/* --------------Declaracion de la gramatica -----------*/

programa ::= dec_comp dec_automata {: 
                                                        System.out.println("Analisis finalizado" + contador); 
                                                        if(continuar){
                                                           System.out.println("Generando fichero...");
                                                           Sintesis sintesis = new Sintesis(maquinas);
                                                        }else{
                                                           System.out.println("Hubo fallos durante la ejecucion"); 
                                                           System.out.println(fallos_ejecucion);
                                                        }
                                  :} ;
dec_comp ::= CMP:com codigo:code {: comp_codigo.put(com, code); :} dec_comp
		| CMP:com codigo:code {: comp_codigo.put(com, code); :} ;
dec_automata ::= automata:machin {: System.out.println("Maquina identificada! n_maquinas: " + ++contador); maquinas.add(machin); :} dec_automata
		| automata:machin {: System.out.println("Maquina identificada! n_maquinas: " + ++contador); maquinas.add(machin); :};
codigo ::= ALM_OP CODIGO:code ALM_CL {: RESULT=code; :};
automata ::= MOORE ID:id {: machine = new MaquinaDeMoore(id); :} cuerpo_automata {: RESULT = machine; :} ;
cuerpo_automata ::= LLCORCH_OP estados estado_ini alf_in alf_out comportamientos transicion LLCORCH_CL ;
estados ::=  ESTADOS dec_estados PUNTO_COMA ;
dec_estados ::= ID:id {: if(!machine.addEstado(id)){fallos_ejecucion += "In line: "+((idleft)+1)+" El estado "+id+" ya esta declarado \n"; continuar = false;} :} COMA dec_estados
		| ID:id {: if(!machine.addEstado(id)){fallos_ejecucion += "In line: "+((idleft)+1)+" El estado "+id+" ya esta declarado \n"; continuar = false;} :} ;
estado_ini ::= ESTADO_INI ID:id {: machine.setEstado_inicial(id); :} PUNTO_COMA ;
alf_in ::= ALF_IN dec_alf_in PUNTO_COMA ;
dec_alf_in ::= ID:id {: if(!machine.addEvento(id)){fallos_ejecucion += "In line: "+((idleft)+1)+" El evento "+id+" ya esta declarado \n"; continuar = false;} :} COMA dec_alf_in
		| ID:id {: if(!machine.addEvento(id)){fallos_ejecucion += "In line: "+((idleft)+1)+" El evento "+id+" ya esta declarado \n"; continuar = false;} :} ;
alf_out ::= ALF_OUT dec_alf_out PUNTO_COMA ;
dec_alf_out ::= CMP:id {: if(!machine.addComp(id)){fallos_ejecucion += "In line: "+((idleft)+1)+" El comportamiento "+id+" ya esta declarado \n"; continuar = false;} :} COMA dec_alf_out
		| CMP:id {: if(!machine.addComp(id)){fallos_ejecucion += "In line: "+((idleft)+1)+" El comportamiento "+id+" ya esta declarado \n"; continuar = false;} :} ;
comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos PUNTO_COMA LLCORCH_CL ;
dec_comportamientos ::= comp_def:tupla {: boolean error = machine.addComportamiento(tupla);
                                          if(!error){ fallos_ejecucion += "In line: "+((tuplaleft)+1)+" El comportamiento "+tupla+" ya esta declarado \n"; continuar = false; }
                                        :} COMA dec_comportamientos 
		| comp_def:tupla {: boolean error = machine.addComportamiento(tupla);
                                    if(!error){ fallos_ejecucion += "In line: "+((tuplaleft)+1)+" El comportamiento "+tupla+" ya esta declarado \n"; continuar = false; }
                                 :} ;
comp_def ::= LLPARENT_OP ID:id COMA CMP:comp LLPARENT_CL 
	{: 
			RESULT=id+"-"+comp+"-"+comp_codigo.get(comp);
	:};
transicion ::= TRANS LLCORCH_OP dec_transicion PUNTO_COMA LLCORCH_CL ;
dec_transicion ::= transicion_def:tupla {: if(!machine.addTransicion(tupla)){
                                              fallos_ejecucion += "In line: "+((tuplaleft)+1)+" El comportamiento "+tupla+" ya esta declarado \n"; continuar = false;
                                           }
                                        :} COMA dec_transicion 
		| transicion_def:tupla {: if(!machine.addTransicion(tupla)){
                                              fallos_ejecucion += "In line: "+((tuplaleft)+1)+" El comportamiento "+tupla+" ya esta declarado \n"; continuar = false;
                                           }
                                        :} ;

transicion_def ::= LLPARENT_OP ID:estado_in COMA ID:evento COMA ID:estado_out LLPARENT_CL {: RESULT=estado_in+"-"+evento+"-"+estado_out; :} ;
	

