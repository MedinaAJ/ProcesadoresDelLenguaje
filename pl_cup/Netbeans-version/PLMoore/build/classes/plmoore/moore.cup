/* ----------------------Seccion de declaraciones package e imports--------------------*/
package plmoore;
import java.io.*;
import java.util.Scanner;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;
//Librerias utilizadas para ejecutar codigo JavaScript almacenado en un String
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.lang.Exception;

/* ----------------------Seccion componentes de codigo de usuario --------------------*/

parser code {:


	public void report_error(String message, Object info) {
   
        /* Crea un StringBuffer llamado 'm' con el string 'Error' en él. */

        StringBuffer m = new StringBuffer("Error");
   
        /* Chequea si la información pasada al método es del mismo
           tipo que el tipo java_cup.runtime.Symbol. */

        if (info instanceof java_cup.runtime.Symbol) {

            /* Declara un objeto 's' del tipo java_cup.runtime.Symbol con la
               información que hay en el objeto info que está siendo convertido
               como un objeto java_cup.runtime.Symbol. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Chequea si el número de línea en la entrada es mayor o
               igual que cero. */
            if (s.left >= 0) {                
                /* Añade al final del mensaje de error StringBuffer
                   el número de línea del error en la entrada. */
                m.append(" en la linea "+(s.left+1));   
                /* Chequea si el número de columna en la entrada es mayor
                   o igual que cero. */
                if (s.right >= 0)                    
                    /* Añade al final del mensaje de error StringBuffer
                       el número de columna del error en la entrada. */
                    m.append(", columna "+(s.right+1));
            }
        }
        /* Añade al final del mensaje de error StringBuffer creado en
           este método el mensaje que fue pasado a este método. */
        m.append(" : "+message);
   
        /* Imprime los contenidos del StringBuffer 'm', que contiene
           el mensaje de error. */
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void syntax_error(Symbol s){
        System.out.println("Error recuperable de sintaxis: "+s.value+" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error no recuperable de sintaxis: "+s.value+" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

   
:}

action code {: 

	boolean fallo;
	String error;
	MaquinaMoore machine, actual;
	int contador_maquinas;
        ArrayList<MaquinaMoore> maquinas;
	ArrayList<String> estados, eventos, comps, transiciones, comps_estado, estados_iniciales;
	ArrayList<ArrayList<String>> estados_por_automata, eventos_por_automata, comps_por_automata, trans_por_automata, comps_est_por_automata;
	Hashtable<String, String> comp_codigo;
	String estado_inicial;
	ScriptEngineManager script;
	ScriptEngine js;


:}
/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/
non terminal aux, programa, dec_comp, automata, dec_automata, cuerpo_automata, estados, dec_estados, estado_ini, alf_in, dec_alf_in, alf_out, dec_alf_out, transicion, dec_transicion, comportamientos, dec_comportamientos;
non terminal String codigo, comp_def, transicion_def;

terminal String CMP, CODIGO, MOORE, ID, LLCORCH_OP, LLCORCH_CL, ESTADOS, ESTADO_INI, ALF_IN, ALF_OUT, TRANS, COMPORTAMIENTO, COMA, PUNTO_COMA, LLPARENT_OP, LLPARENT_CL, ALM_OP, ALM_CL;

/* -------------Declaracion de precedencias -----------*/

/* --------------Declaracion de la gramatica -----------*/

aux ::= {: 

	fallo = false;
	error = "";
	script = new ScriptEngineManager(); 
	js = script.getEngineByName("JavaScript"); 
	contador_maquinas = 0; 
	estados = new ArrayList<String>();
        eventos = new ArrayList<String>();
        comps = new ArrayList<String>(); 
	transiciones= new ArrayList<String>();
	comps_estado = new ArrayList<String>();
        estados_iniciales = new ArrayList<String>();
	estados_iniciales = new ArrayList<String>();	
	comp_codigo = new Hashtable<String, String>();
	eventos_por_automata = new ArrayList<ArrayList<String>>();
	estados_por_automata  = new ArrayList<ArrayList<String>>();
	comps_por_automata  = new ArrayList<ArrayList<String>>();
	trans_por_automata = new ArrayList<ArrayList<String>>();
	
        :} programa {: 
	

	System.out.println("Analisis finalizado"); 

	if(fallo){
		System.out.println("Analisis incorrecto");
		System.out.println(error);
		System.exit(1);

	}else{
	
		System.out.println("Numero de automatas declarados: " +maquinas.size());

		//Aqui se ejecutan las maquinas
		String e = "";
		for(int i = 0; i < maquinas.size(); i++){
			actual = maquinas.get(i);
			System.out.println("Máquina de Moore: "+ actual.getName());
			for(int k = 0; k < eventos_por_automata.get(i).size() ; k++){
				actual.addEvent(eventos_por_automata.get(i).get(k));
				e += eventos_por_automata.get(i).get(k)+" ";
			}
			System.out.println("Eventos de entrada: " + e);
			e = "";
			actual.ejecutar();
		}
	}
	:} ;

programa ::= dec_comp {: maquinas = new ArrayList<MaquinaMoore>();   :} dec_automata ;

dec_comp ::= CMP:com codigo:code {:  comp_codigo.put(com, code); :} dec_comp
		| CMP:com codigo:code {:  comp_codigo.put(com, code); :} ;

dec_automata ::= automata {: ++contador_maquinas; :} dec_automata
		| automata {: ++contador_maquinas; :};

codigo ::= ALM_OP CODIGO:code ALM_CL {: RESULT=code; :};

//Producciones de error de codigo
codigo ::= ALM_OP CODIGO:code {:
			         fallo = true;
		                 error += "In line: "+((codeleft)+1)+"Necesita cerrar con una '#' la sentencia \n";
:};
codigo ::= CODIGO:code ALM_CL {: 
				 fallo = true;
		                 error += "In line: "+((codeleft)+1)+"Necesita abrir con una '#' la sentencia  \n"; 
:};
/*******************************/

automata ::= MOORE ID:id {: 
  	     machine = new MaquinaMoore(id);
	     :} cuerpo_automata ;

cuerpo_automata ::= LLCORCH_OP estados estado_ini alf_in alf_out comportamientos 

transicion LLCORCH_CL {: maquinas.add(machine); 
			
			:} ;

estados ::=  ESTADOS dec_estados PUNTO_COMA ;

//Produccion de error estados
estados ::=  ESTADOS:est dec_estados {:
			            fallo = true;
				    error += "In line: "+((estleft)+1)+"Falta ';' al final de la sentencia \n";
 :} ;
/****************************/

dec_estados ::= ID:id 
                    {: if(!estados.contains(id)){
                            estados.add(id);
                       }else{
                            fallo = true;
                            error += "In line: "+((idleft)+1)+" El estado "+id+" ya esta declarado \n";
                       }
                    :} COMA dec_estados
		| ID:id {:  if(!estados.contains(id)){
                                estados.add(id);
                                estados_por_automata.add(estados); 
                                estados = new ArrayList<String>();
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El estado "+id+" ya esta declarado \n";
                            }
			:} ;

//Producción de error dec_estados
dec_estados ::= ID:id dec_estados {:
				  fallo = true;
				  error += "In line: "+((idleft)+1)+"Separe los estados con ',' \n";
                                   :} ;
/********************************/

estado_ini ::= ESTADO_INI ID:id {:
                                if(!estados.contains(id)){
                                    estado_inicial=id; 
                                    estados_iniciales.add(estado_inicial); 
                                }else{
                                    fallo = true;
                                    error += "In line: "+((idleft)+1)+" El estado inicial "+id+" no esta declarado en la lista de estados\n";
                                }
                                :} PUNTO_COMA ;
				
//Produccion de error estado_ini
estado_ini ::= ESTADO_INI ID:id {: 
				fallo = true;
				error += "In line: "+((idleft)+1)+"Falta ';' al final de la sentencia \n";
:} ;
/*********************/

alf_in ::= ALF_IN dec_alf_in PUNTO_COMA ;

//Produccion error alf_in
alf_in ::= ALF_IN:id dec_alf_in {: 
				fallo = true;
				error += "In line: "+((idleft)+1)+"Falta ';' al final de la sentencia \n";
 :} ;
/************************************/

dec_alf_in ::= ID:id {:
                            if(!eventos.contains(id)){
                                eventos.add(id); 
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" La transicion "+id+" ya esta declarada \n";
                            }                      
                     :} COMA dec_alf_in
		| ID:id {:
                            if(!eventos.contains(id)){
                                eventos.add(id); 
                                eventos_por_automata.add(eventos);
                                eventos = new ArrayList<String>();
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" La transicion "+id+" ya esta declarada \n";
                            }
                      :} ;

//Produccion de error de dec_alf_in
dec_alf_in ::= ID:id dec_alf_in {:  
				   fallo = true;
				   error += "In line: "+((idleft)+1)+" separe los elementos del alfabeto con ',' \n";
:} ;
/************************************/

alf_out ::= ALF_OUT dec_alf_out PUNTO_COMA ;

//Produccion error alf_out
alf_out ::= ALF_OUT:id dec_alf_out {: 
				   fallo = true;
				   error += "In line: "+((idleft)+1)+" Falta ';' al final de la sentencia',' \n";
 :} ;
/************************************/

dec_alf_out ::= CMP:id {:
                            if(comp_codigo.get(id).equals(null)){
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El comportamiento "+id+" no tiene codigo declarado \n";
                            }
                            if(!comps.contains(id)){
                                comps.add(id); 
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El comportamiento "+id+" ya esta declarado \n";
                            }
                        :} COMA dec_alf_out
		| CMP:id {: if(comp_codigo.get(id).equals(null)){
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El comportamiento "+id+" no tiene codigo declarado \n";
                            }
                            if(!comps.contains(id)){
                                comps.add(id); 
                                comps_por_automata.add(comps);
                                comps = new ArrayList<String>();
                            }else{
                                fallo = true;
                                error += "In line: "+((idleft)+1)+" El comportamiento "+id+" ya esta declarado \n";
                            }
                         :} ;

//Produccion de error de dec_alf_out
dec_alf_out ::= CMP:id dec_alf_out {: 
				   fallo = true;
				   error += "In line: "+((idleft)+1)+"Separe los comportamientos del alfabeto con ',' \n";
					
 :} ;
/************************************/

comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos PUNTO_COMA {: machine.addEstadosToMachine(); :} LLCORCH_CL ;

/****Error comportamientos****/
comportamientos ::= COMPORTAMIENTO:tupla dec_comportamientos PUNTO_COMA {: fallo = true;
                                                                     error += "In line: "+((tuplaleft)+1)+"ERROR: Falta una llave de apertura\n";	 
                                                                  :} LLCORCH_CL ;
comportamientos ::= COMPORTAMIENTO:tupla LLCORCH_OP dec_comportamientos PUNTO_COMA {: fallo = true;
                                                                                error += "In line: "+((tuplaleft)+1)+"ERROR: Falta una llave de cierre\n";	 
                                                                          :} ;

comportamientos ::= LLCORCH_OP:tupla dec_comportamientos PUNTO_COMA {: fallo = true;
                                                                 error += "In line: "+((tuplaleft)+1)+"ERROR: Falta la palabra reservada comportamiento\n";
                                                              :} LLCORCH_CL ; 

comportamientos ::= COMPORTAMIENTO LLCORCH_OP:tupla dec_comportamientos {: fallo = true;
                                                                     error += "In line: "+((tuplaleft)+1)+"ERROR: Falta un punto y coma\n";
                                                                  :} LLCORCH_CL ; 
/****Fin Error comportamientos****/

dec_comportamientos ::= comp_def:tupla 
	{: 
		if(!comps_estado.contains(tupla)){
			comps_estado.add(tupla);
		}else{
			fallo = true;
			error += "In line: "+((tuplaleft)+1)+"ERROR: Comportamiento "+ tupla + " ya está declarado\n";			
		}
		 
	:} 				COMA dec_comportamientos 
		| comp_def:tupla 
	{: 
		if(!comps_estado.contains(tupla)){
			comps_estado.add(tupla);
			comps_por_automata.add(comps_estado);
			comps_estado = new ArrayList<String>();
		}else{
			fallo = true;
			error += "In line: "+((tuplaleft)+1)+" ERROR: Comportamiento "+ tupla + " ya está declarado\n";			
		}
	:} ;

comp_def ::= LLPARENT_OP ID:id COMA CMP:comp LLPARENT_CL 
	{:
			RESULT=id+"-"+comp+"-"+comp_codigo.get(comp);
                        if(estados.contains(id)){
                            fallo = true;
			    error += "In line: "+((idleft)+1)+" ERROR: El estado " + id + " no esta declarado \n";
                        }
			if(!comp_codigo.get(comp).equals(null)){
				
				
				Runnable sal_state = () -> {
					try {
						js.eval(comp_codigo.get(comp));
					} catch (ScriptException ex) {
						System.out.println("El codigo asociado al estado "+id+" es incorrecto, ERROR:"+ex);
					}
					System.out.println("Salgo del estado "+id);
				};
				Runnable final_state = () -> {
					System.out.println("El ultimo estado "+id);
					try {
						js.eval(comp_codigo.get(comp));
					} catch (ScriptException ex) {
						System.out.println("El codigo asociado al estado "+id+" es incorrecto, ERROR:"+ex);
					}
				};
								
				if(id.equals(estado_inicial)){
					Runnable entr_state = () -> {
						System.out.println(" ");
					};
					machine.addState(id,entr_state,sal_state,final_state);
				}else{
					Runnable entr_state = () -> {
						System.out.println("Entro al estado"+id);
					};
					machine.cargarEstados(entr_state,sal_state,final_state, id);
				}
				
				
			}else{
				fallo = true;
				error += "In line: "+((idleft)+1)+"ERROR: No se ha asociado ningún código de comportamiento al autómata \n";
			}

	:} ;

//Producciones de error de comp_def
comp_def ::= LLPARENT_OP CMP:cmp LLPARENT_CL {: fallo = true;
						error += "In line: "+((cmpleft)+1)+" Necesita declarar un estado \n";
 :} ;

comp_def ::= LLPARENT_OP ID COMA:coma LLPARENT_CL {:  
						     fallo = true;
						     error += "In line: "+((comaleft)+1)+" Necesita declarar un comportamiento para el estado \n";

:} ;
		
comp_def ::= LLPARENT_OP ID:id CMP LLPARENT_CL {: 
						fallo = true;
						error += "In line: "+((idleft)+1)+" Necesita separar estado y comportamiento con una ','\n";			
 :} ;
//////////////////////////////////


transicion ::= TRANS LLCORCH_OP dec_transicion PUNTO_COMA LLCORCH_CL ;

dec_transicion ::= transicion_def:tupla 
	{: 
		if(!transiciones.contains(tupla)){
			transiciones.add(tupla);
		}else{
			fallo = true;
			error += "In line: "+((tuplaleft)+1)+"ERROR: Transición "+ tupla + " ya está declarada\n";
		}

	:} 
				   	COMA  dec_transicion 
		| transicion_def:tupla 
	{: 
		if(!transiciones.contains(tupla)){
			transiciones.add(tupla); trans_por_automata.add(transiciones); 			
			transiciones = new ArrayList<String>(); 
		}else{
			fallo = true;
			error += "In line: "+((tuplaleft)+1)+"ERROR: Transición "+ tupla + " ya está declarada\n";
		}		

	:} ; 

transicion_def ::= LLPARENT_OP ID:estado_in COMA ID:evento COMA ID:estado_out LLPARENT_CL {: 								RESULT=estado_in+"-"+evento+"-"+estado_out; 			   						machine.addTransition(evento,estado_in,estado_out); :} ;

//Producciones de error de transicion_def
transicion_def ::= LLPARENT_OP ID:id ID COMA ID LLPARENT_CL {:
							   fallo = true;
							   error += "In line: "+((idleft)+1)+"Ha olvidado una ','\n";
:} ;
transicion_def ::= LLPARENT_OP ID COMA ID:id ID LLPARENT_CL {: 
							   fallo = true;
							   error += "In line: "+((idleft)+1)+"Ha olvidado una ','\n";
 :} ;
/****************************************/

