
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 05 17:54:32 CET 2019
//----------------------------------------------------

import java.io.*;
import java.util.Scanner;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Hashtable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 05 17:54:32 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\026\002\000\002\002\004\000\002\002" +
    "\004\000\002\027\002\000\002\003\005\000\002\030\002" +
    "\000\002\004\006\000\002\004\004\000\002\031\002\000" +
    "\002\006\005\000\002\006\003\000\002\023\005\000\002" +
    "\023\004\000\002\023\004\000\002\032\002\000\002\005" +
    "\006\000\002\007\012\000\002\010\005\000\002\010\004" +
    "\000\002\033\002\000\002\011\006\000\002\011\003\000" +
    "\002\011\004\000\002\034\002\000\002\012\006\000\002" +
    "\012\004\000\002\013\005\000\002\015\004\000\002\035" +
    "\002\000\002\014\006\000\002\014\003\000\002\014\004" +
    "\000\002\015\005\000\002\015\004\000\002\036\002\000" +
    "\002\016\006\000\002\016\003\000\002\016\004\000\002" +
    "\021\007\000\002\037\002\000\002\022\006\000\002\022" +
    "\003\000\002\024\007\000\002\024\005\000\002\024\006" +
    "\000\002\024\006\000\002\017\007\000\002\040\002\000" +
    "\002\020\006\000\002\020\003\000\002\025\011\000\002" +
    "\025\010\000\002\025\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\004\001\001\002\000\004\002\151\001" +
    "\002\000\004\004\007\001\002\000\004\002\000\001\002" +
    "\000\006\005\142\024\141\001\002\000\004\006\ufffe\001" +
    "\002\000\004\006\013\001\002\000\006\002\ufff7\006\ufff9" +
    "\001\002\000\004\007\015\001\002\000\004\002\ufffd\001" +
    "\002\000\004\010\ufff3\001\002\000\004\010\017\001\002" +
    "\000\004\012\021\001\002\000\006\002\ufff2\006\ufff2\001" +
    "\002\000\004\007\130\001\002\000\004\013\024\001\002" +
    "\000\004\014\030\001\002\000\004\007\025\001\002\000" +
    "\006\014\uffe8\021\uffea\001\002\000\004\021\027\001\002" +
    "\000\004\014\uffe9\001\002\000\004\007\121\001\002\000" +
    "\006\014\032\015\033\001\002\000\004\007\121\001\002" +
    "\000\004\004\111\001\002\000\004\017\036\001\002\000" +
    "\004\016\061\001\002\000\004\010\037\001\002\000\004" +
    "\022\041\001\002\000\006\020\uffda\021\uffd8\001\002\000" +
    "\006\004\046\007\045\001\002\000\004\021\043\001\002" +
    "\000\004\011\044\001\002\000\004\016\uffdb\001\002\000" +
    "\006\004\051\020\050\001\002\000\004\023\047\001\002" +
    "\000\006\020\uffd6\021\uffd6\001\002\000\006\004\053\023" +
    "\054\001\002\000\004\023\052\001\002\000\006\020\uffd4" +
    "\021\uffd4\001\002\000\004\023\055\001\002\000\006\020" +
    "\uffd5\021\uffd5\001\002\000\006\020\uffd7\021\uffd7\001\002" +
    "\000\004\020\057\001\002\000\004\022\041\001\002\000" +
    "\004\021\uffd9\001\002\000\004\010\064\001\002\000\004" +
    "\011\063\001\002\000\006\002\ufff1\006\ufff1\001\002\000" +
    "\004\022\065\001\002\000\004\007\075\001\002\000\004" +
    "\021\073\001\002\000\006\020\uffd2\021\uffd0\001\002\000" +
    "\004\020\071\001\002\000\004\022\065\001\002\000\004" +
    "\021\uffd1\001\002\000\004\011\074\001\002\000\004\011" +
    "\uffd3\001\002\000\006\007\077\020\076\001\002\000\004" +
    "\007\103\001\002\000\004\020\100\001\002\000\004\007" +
    "\101\001\002\000\004\023\102\001\002\000\006\020\uffce" +
    "\021\uffce\001\002\000\006\007\104\020\105\001\002\000" +
    "\004\023\110\001\002\000\004\007\106\001\002\000\004" +
    "\023\107\001\002\000\006\020\uffcf\021\uffcf\001\002\000" +
    "\006\020\uffcd\021\uffcd\001\002\000\012\004\111\017\uffdd" +
    "\020\uffdf\021\uffdd\001\002\000\006\017\uffe0\021\113\001" +
    "\002\000\004\017\uffe1\001\002\000\004\020\116\001\002" +
    "\000\006\017\uffdc\021\uffdc\001\002\000\004\004\111\001" +
    "\002\000\006\017\uffde\021\uffde\001\002\000\004\017\uffe6" +
    "\001\002\000\012\007\121\017\uffe3\020\uffe5\021\uffe3\001" +
    "\002\000\006\017\uffe2\021\uffe2\001\002\000\004\020\124" +
    "\001\002\000\004\007\121\001\002\000\006\017\uffe4\021" +
    "\uffe4\001\002\000\004\021\127\001\002\000\006\014\uffe7" +
    "\015\uffe7\001\002\000\012\007\130\013\uffec\020\uffee\021" +
    "\uffec\001\002\000\006\013\uffef\021\132\001\002\000\004" +
    "\013\ufff0\001\002\000\006\013\uffeb\021\uffeb\001\002\000" +
    "\004\020\135\001\002\000\004\007\130\001\002\000\006" +
    "\013\uffed\021\uffed\001\002\000\004\006\013\001\002\000" +
    "\004\002\ufff8\001\002\000\004\005\147\001\002\000\004" +
    "\024\146\001\002\000\006\004\ufffc\006\ufffa\001\002\000" +
    "\004\004\007\001\002\000\004\006\ufffb\001\002\000\006" +
    "\004\ufff4\006\ufff4\001\002\000\010\004\ufff5\006\ufff5\025" +
    "\150\001\002\000\006\004\ufff6\006\ufff6\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\006\002\003\026\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\004\023\142\001\001\000\004\027\010\001\001\000" +
    "\006\005\011\006\013\001\001\000\004\031\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\015\001" +
    "\001\000\004\007\017\001\001\000\004\010\021\001\001" +
    "\000\002\001\001\000\004\011\130\001\001\000\004\012" +
    "\022\001\001\000\004\013\030\001\001\000\002\001\001" +
    "\000\004\034\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\125\001\001\000\004\015\033\001\001" +
    "\000\004\014\117\001\001\000\004\016\111\001\001\000" +
    "\004\021\034\001\001\000\004\017\061\001\001\000\002" +
    "\001\001\000\006\022\041\024\037\001\001\000\004\037" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\057\024\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\065\025\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\067\001" +
    "\001\000\002\001\001\000\006\020\071\025\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\114\036" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\121\035\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\132\033\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\135\001\001\000\002\001\001\000\006\005" +
    "\011\006\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\143\001\001\000\004\004" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 

	boolean fallo;
	String error;
	MaquinaMoore machine, actual;
	int contador_maquinas;
        ArrayList<MaquinaMoore> maquinas;
	ArrayList<String> estados, eventos, comps, transiciones, comps_estado;
	ArrayList<ArrayList<String>> estados_por_automata, eventos_por_automata, comps_por_automata, trans_por_automata, comps_est_por_automata;
	ArrayList<String> estados_iniciales;
	Hashtable<String, String> comp_codigo;
	String estado_inicial;
	ScriptEngineManager script;
	ScriptEngine js;
	Scanner lectura;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // transicion_def ::= LLPARENT_OP ID COMA ID ID LLPARENT_CL 
            {
              String RESULT =null;
		 System.out.println("Ha olvidado una ','"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_def",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // transicion_def ::= LLPARENT_OP ID ID COMA ID LLPARENT_CL 
            {
              String RESULT =null;
		 System.out.println("Ha olvidado una ','"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_def",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // transicion_def ::= LLPARENT_OP ID COMA ID COMA ID LLPARENT_CL 
            {
              String RESULT =null;
		int estado_inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int estado_inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String estado_in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eventoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eventoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String evento = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int estado_outleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int estado_outright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String estado_out = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 								RESULT=estado_in+"-"+evento+"-"+estado_out; 			   						machine.addTransition(evento,estado_in,estado_out);
					System.out.println("Terminando de añadir transiciones"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_def",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_transicion ::= transicion_def 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Se obtiene tupla de transiciones: "+tupla); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_transicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_transicion ::= transicion_def NT$10 COMA dec_transicion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_transicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$10 ::= 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("Se obtiene tupla de transiciones: "+tupla); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // transicion ::= TRANS LLCORCH_OP dec_transicion PUNTO_COMA LLCORCH_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comp_def ::= LLPARENT_OP ID CMP LLPARENT_CL 
            {
              String RESULT =null;
		 System.out.println("Necesita separar estado y comportamiento con una ','"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_def",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comp_def ::= LLPARENT_OP ID COMA LLPARENT_CL 
            {
              String RESULT =null;
		 System.out.println("Necesita declarar un comportamiento para el estado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_def",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comp_def ::= LLPARENT_OP CMP LLPARENT_CL 
            {
              String RESULT =null;
		 System.out.println("Necesita declarar un estado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_def",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comp_def ::= LLPARENT_OP ID COMA CMP LLPARENT_CL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT=id+"-"+comp+"-"+comp_codigo.get(comp);
			/*comp_codigo.get(comp) Devuelve null si no hay codigo asociado*/ 
			Runnable entr_state = () -> {
				System.out.println("Entro al estado "+id);
			};
			Runnable sal_state = () -> {
				try {
					js.eval(comp_codigo.get(comp));
				} catch (ScriptException ex) {
					System.out.println("Hubo un error:"+ex);
				}
				System.out.println("Salgo del estado "+id);
			};
			Runnable final_state = () -> {
				System.out.println("El ultimo estado "+id);
				try {
					js.eval(comp_codigo.get(comp));
				} catch (ScriptException ex) {
					System.out.println("Hubo un error:"+ex);
				}
			};
			machine.addState(id,entr_state,sal_state,final_state);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_def",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_comportamientos ::= comp_def 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Se obtiene tupla declaracion comportamientos: "+tupla); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comportamientos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_comportamientos ::= comp_def NT$9 COMA dec_comportamientos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comportamientos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$9 ::= 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tupla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("Se obtiene tupla declaracion comportamientos: "+tupla); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos PUNTO_COMA LLCORCH_CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comportamientos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_alf_out ::= CMP dec_alf_out 
            {
              Object RESULT =null;
		 System.out.println("Separe los elementos del alfabeto con ','"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_out",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_alf_out ::= CMP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Se obtiene comportamiento: "+id); comps.add(id); comps_por_automata.add(comps);
										  comps = new ArrayList<>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_out",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_alf_out ::= CMP NT$8 COMA dec_alf_out 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_out",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("Se obtiene comportamiento: "+id);   comps.add(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // alf_out ::= ALF_OUT dec_alf_out 
            {
              Object RESULT =null;
		 System.out.println("Falta ';' al final de la sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alf_out",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // alf_out ::= ALF_OUT dec_alf_out PUNTO_COMA 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alf_out",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_alf_in ::= ID dec_alf_in 
            {
              Object RESULT =null;
		 System.out.println("Separe los elementos del alfabeto con ','"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_in",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_alf_in ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Se obtiene la entrada: "+id); eventos.add(id); eventos_por_automata.add(eventos);
									     eventos = new ArrayList<String>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_in",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_alf_in ::= ID NT$7 COMA dec_alf_in 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_alf_in",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("Se obtiene la entrada: "+id);    eventos.add(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // alf_out ::= ALF_IN dec_alf_in 
            {
              Object RESULT =null;
		 System.out.println("Falta ';' al final de la sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alf_out",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // alf_in ::= ALF_IN dec_alf_in PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alf_in",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estado_ini ::= ESTADO_INI ID 
            {
              Object RESULT =null;
		 System.out.println("Falta ';' al final de la sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_ini",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estado_ini ::= ESTADO_INI ID NT$6 PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_ini",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("Se obtiene estado inicial: "+id); estado_inicial=id; 
					estados_iniciales.add(estado_inicial); estado_inicial= ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_estados ::= ID dec_estados 
            {
              Object RESULT =null;
		error+="Separe los estados con ','\n";
				 System.out.println("Separe los estados con ','"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_estados",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_estados ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Se obtiene estado: "+id); estados.add(id); estados_por_automata.add(estados); 
									estados = new ArrayList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_estados",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_estados ::= ID NT$5 COMA dec_estados 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_estados",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("Se obtiene estado: "+id); estados.add(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estados ::= ESTADOS dec_estados 
            {
              Object RESULT =null;
		 System.out.println("Falta ';' al final de la sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estados ::= ESTADOS dec_estados PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo_automata ::= LLCORCH_OP estados estado_ini alf_in alf_out comportamientos transicion LLCORCH_CL 
            {
              Object RESULT =null;
		 maquinas.add(machine); 
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_automata",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // automata ::= MOORE ID NT$4 cuerpo_automata 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("automata",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("Nombre maquina: " + id);
  	     machine = new MaquinaMoore(id);
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= CODIGO ALM_OP 
            {
              String RESULT =null;
		 System.out.println("Necesita abrir con una '#' la sentencia "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= ALM_OP CODIGO 
            {
              String RESULT =null;
		 System.out.println("Necesita cerrar con una '#' la sentencia "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= ALM_OP CODIGO ALM_CL 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=code; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_automata ::= automata 
            {
              Object RESULT =null;
		 System.out.println("Maquina identificada! n_maquinas: " + ++contador_maquinas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_automata",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_automata ::= automata NT$3 dec_automata 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_automata",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.println("Maquina identificada! n_maquinas: " + ++contador_maquinas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_comp ::= CMP codigo 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Se obtiene Comportamiendo con id: " + com + " y codigo: " + code); comp_codigo.put(com, code); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_comp ::= CMP codigo NT$2 dec_comp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_comp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("Se obtiene Comportamiendo con id: " + com + " y codigo: " + code); comp_codigo.put(com, code); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= dec_comp NT$1 dec_automata 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 maquinas = new ArrayList<MaquinaMoore>();   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= aux EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // aux ::= NT$0 programa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 

	System.out.println("Analisis finalizado " + contador_maquinas); 
	System.out.println("Numero de comps por codigo" +comp_codigo.size());

	//Aqui se ejecutan las maquinas
	
	for(int i = 0; i < maquinas.size(); i++){
		actual = maquinas.get(i);
	
		for(int k = 0; k < eventos_por_automata.get(i).size() ; k++){
			actual.addEvent(eventos_por_automata.get(i).get(k));
		}
		actual.ejecutar();
	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aux",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 
	fallo = false;
	error = "";
	script = new ScriptEngineManager(); 
	lectura = new Scanner(System.in);
	js = script.getEngineByName("JavaScript"); 
	contador_maquinas = 0; 
	estados = new ArrayList<String>();
	eventos = new ArrayList<String>();
	comps = new ArrayList<String>();
	comp_codigo = new Hashtable<String, String>();
	eventos_por_automata = new ArrayList<ArrayList<String>>();
	estados_por_automata =  new ArrayList<ArrayList<String>>();
	estados_iniciales = new ArrayList<String>();
	comps_por_automata =  new ArrayList<ArrayList<String>>();

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

