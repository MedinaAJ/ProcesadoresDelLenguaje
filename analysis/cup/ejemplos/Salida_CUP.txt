===== Terminals =====
[0]EOF [1]error [2]c [3]d 

===== Non terminals =====
[0]S [1]C 

===== Productions =====
[0] S ::= C C 
[1] $START ::= S EOF 
[2] C ::= c C 
[3] C ::= d 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [C ::= (*) c C , {c d }]
  [$START ::= (*) S EOF , {EOF }]
  [C ::= (*) d , {c d }]
  [S ::= (*) C C , {EOF }]
}
transition on c to state [4]
transition on d to state [3]
transition on C to state [2]
transition on S to state [1]

-------------------
lalr_state [1]: {
  [$START ::= S (*) EOF , {EOF }]
}
transition on EOF to state [7]

-------------------
lalr_state [2]: {
  [C ::= (*) c C , {EOF }]
  [C ::= (*) d , {EOF }]
  [S ::= C (*) C , {EOF }]
}
transition on c to state [4]
transition on d to state [3]
transition on C to state [6]

-------------------
lalr_state [3]: {
  [C ::= d (*) , {EOF c d }]
}

-------------------
lalr_state [4]: {
  [C ::= c (*) C , {EOF c d }]
  [C ::= (*) c C , {EOF c d }]
  [C ::= (*) d , {EOF c d }]
}
transition on c to state [4]
transition on C to state [5]
transition on d to state [3]

-------------------
lalr_state [5]: {
  [C ::= c C (*) , {EOF c d }]
}

-------------------
lalr_state [6]: {
  [S ::= C C (*) , {EOF }]
}

-------------------
lalr_state [7]: {
  [$START ::= S EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 2:SHIFT(to state 4)] [term 3:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 7)]
From state #2
 [term 2:SHIFT(to state 4)] [term 3:SHIFT(to state 3)]
From state #3
 [term 0:REDUCE(with prod 3)] [term 2:REDUCE(with prod 3)]
 [term 3:REDUCE(with prod 3)]
From state #4
 [term 2:SHIFT(to state 4)] [term 3:SHIFT(to state 3)]
From state #5
 [term 0:REDUCE(with prod 2)] [term 2:REDUCE(with prod 2)]
 [term 3:REDUCE(with prod 2)]
From state #6
 [term 0:REDUCE(with prod 0)]
From state #7
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 1->state 2]
From state #1
From state #2
 [non term 1->state 6]
From state #3
From state #4
 [non term 1->state 5]
From state #5
From state #6
From state #7
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 0 warnings
  4 terminals, 2 non-terminals, and 4 productions declared, 
  producing 8 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)

