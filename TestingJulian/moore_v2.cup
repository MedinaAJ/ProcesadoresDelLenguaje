/* ----------------------Seccion de declaraciones package e imports--------------------*/
import java.io.*;
import java_cup.runtime.*;
import java.util.*;
//Librerias utilizadas para ejecutar codigo JavaScript almacenado en un String
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

/* ----------------------Seccion componentes de codigo de usuario --------------------*/
action code {: 
	MaquinaMoore machine;
	int contador;
        ArrayList<MaquinaMoore> maquinas;
	ArrayList<String> estados,eventos,comps;
	Hashtable<String, String> comp_codigo;
	String estado_inicial;
	ScriptEngineManager script;
	ScriptEngine js;
:}
/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/
non terminal aux, programa, dec_comp, automata, dec_automata, cuerpo_automata, estados, dec_estados, estado_ini, alf_in, dec_alf_in, alf_out, dec_alf_out, transicion, dec_transicion, comportamientos, dec_comportamientos;
non terminal String codigo;
non terminal String comp_def;
non terminal String transicion_def;

terminal String CMP;
terminal String CODIGO; 
terminal String MOORE;
terminal String ID;
terminal String LLCORCH_OP;
terminal String LLCORCH_CL;
terminal String ESTADOS;
terminal String ESTADO_INI;
terminal String ALF_IN;
terminal String ALF_OUT;
terminal String TRANS;
terminal String COMPORTAMIENTO;
terminal String COMA;
terminal String PUNTO_COMA;
terminal String LLPARENT_OP;
terminal String LLPARENT_CL;
terminal String ALM_OP;
terminal String ALM_CL;

/* --------------Declaracion de la gramatica -----------*/

aux ::= {: script = new ScriptEngineManager(); js = script.getEngineByName("JavaScript"); contador = 0; estados = new ArrayList<String>(); eventos = new ArrayList<String>(); comps = new ArrayList<String>(); comp_codigo = new Hashtable<String, String>(); :} programa 
	{: 
			System.out.println("Analisis finalizado" + contador); 
			/*
			 * Control de errores: Aún no he podido implementar todo. No obstante he hecho una lista con los que se me han ocurrido para poder ir trabajando:
			 *	
			 * Comprobar que el codigo no este vacio (Creo que hecho, falta probar).
			 * Comprobar que no se meta 2 veces la misma transicion
			 * En general, ya que en las transiciones y comportamientos se asocian a estados, comprobar que esos estados están en la lista.
			 *
			 * Pedir la entrada al usuario, y definir una entrada por cada automata de la lista. (En teoría hecho aquí abajo. Porfaplis provadlo). 	
			 */
			Scanner sc = new Scanner(System.in); //Scanner para pedir al usuario la entrada
			int i,j,k;
			String entrada[]; //Vacia porque la vamos a ir rellenando sobre la marcha
			MaquinaMoore actual;
			//Recorro la lista de maquinas de moore
			for(i=0;i<maquinas.size();i++){
				actual = maquinas.get(i); //Coges la actual
				//Guardas las entradas en orden
				System.out.println("¿Cuantas entradas tiene la maquina ?"+i);
				int nEventos = sc.nextInt();
				for(j=0;j<nEventos;j++){
					System.out.println("Introduzca la entrada "+j);					
					entrada[j]=sc.next();
				}
				//Añades los eventos a esa maquina de moore
				for(k=0;k<entradas.length;k++){
					actual.addEvent(entrada[k]);
				}
				//Una vez he pedido todo, ejecuto la maquina
				actual.ejecutar();		
			}
	:} ;
programa ::= dec_comp {: maquinas = new ArrayList<MaquinaMoore>(); :} dec_automata ;

dec_comp ::= CMP:com codigo:code {: System.out.println("Se obtiene Comportamiendo con id: " + com + " y codigo: " + code); comp_codigo.put(com, code); :} dec_comp
		| CMP:com codigo:code {: System.out.println("Se obtiene Comportamiendo con id: " + com + " y codigo: " + code); comp_codigo.put(com, code); :} ;

dec_automata ::= automata {: System.out.println("Maquina identificada! n_maquinas: " + ++contador); :} dec_automata
		| automata {: System.out.println("Maquina identificada! n_maquinas: " + ++contador); :};

codigo ::= ALM_OP CODIGO:code ALM_CL {: RESULT=code; :};

//Producciones de error de codigo
codigo ::= ALM_OP CODIGO {: System.out.println("Necesita cerrar con una '#' la sentencia "); :};
/*******************************/

automata ::= MOORE ID:id {: System.out.println("Nombre maquina: " + id);  machine = new MaquinaMoore(id); :} cuerpo_automata ;

cuerpo_automata ::= LLCORCH_OP estados estado_ini alf_in alf_out comportamientos transicion LLCORCH_CL {: maquinas.add(machine); :} ;

estados ::=  ESTADOS dec_estados PUNTO_COMA ;

//Produccion de error estados
estados ::=  ESTADOS dec_estados {: System.out.println("Falta ';' al final de la sentencia"); :} ;
/****************************/

dec_estados ::= ID:id {: System.out.println("Se obtiene estado: "+id); estados.add(id); :} COMA dec_estados
		| ID:id {: System.out.println("Se obtiene estado: "+id); estados.add(id); :} ;

//Producción de error dec_estados
dec_estados ::= ID dec_estados {: System.out.println("Separe los estados con ','"); :} ;
/********************************/

estado_ini ::= ESTADO_INI ID:id {: System.out.println("Se obtiene estado inicial: "+id); estado_inicial=id; :} PUNTO_COMA ;

//Produccion de error estado_ini
estado_ini ::= ESTADO_INI ID {: System.out.println("Falta ';' al final de la sentencia"); :} ;
/*********************/

alf_in ::= ALF_IN dec_alf_in PUNTO_COMA ;

//Produccion error alf_in
alf_out ::= ALF_IN dec_alf_in {: System.out.println("Falta ';' al final de la sentencia"); :} ;
/************************************/

dec_alf_in ::= ID:id {: System.out.println("Se obtiene transicion: "+id); eventos.add(id); /*Añadir a moore la transicion*/ :} COMA dec_alf_in
		| ID:id {: System.out.println("Se obtiene transicion: "+id); eventos.add(id); /*Añadir a moore la transicion*/ :} ;

//Produccion de error de dec_alf_in
dec_alf_in ::= ID dec_alf_in {: System.out.println("Separe los elementos del alfabeto con ','"); :} ;
/************************************/

alf_out ::= ALF_OUT dec_alf_out PUNTO_COMA ;

//Produccion error alf_out
alf_out ::= ALF_OUT dec_alf_out {: System.out.println("Falta ';' al final de la sentencia"); :} ;
/************************************/

dec_alf_out ::= CMP:id {: System.out.println("Se obtiene comportamiento: "+id); comps.add(id); /*Añadir a moore la transicion*/ :} COMA dec_alf_out
		| CMP:id {: System.out.println("Se obtiene comportamiento: "+id); comps.add(id); /*Añadir a moore la transicion*/ :} ;

//Produccion de error de dec_alf_out
dec_alf_out ::= CMP dec_alf_out {: System.out.println("Separe los elementos del alfabeto con ','"); :} ;
/************************************/

comportamientos ::= COMPORTAMIENTO LLCORCH_OP dec_comportamientos PUNTO_COMA LLCORCH_CL ;

dec_comportamientos ::= comp_def:tupla {: System.out.println("Se obtiene tupla: "+tupla); :} COMA dec_comportamientos 
		| comp_def:tupla {: System.out.println("Se obtiene tupla: "+tupla); :} ;

comp_def ::= LLPARENT_OP ID:id COMA CMP:comp LLPARENT_CL 
	{: 
			RESULT=id+"-"+comp+"-"+comp_codigo.get(comp);
			/*comp_codigo.get(comp) Devuelve null si no hay codigo asociado*/
			if(comp_codigo.get(comp)!=null){
				Runnable entr_state = () -> {
					System.out.println("Entro al estado "+id);
				};
				Runnable sal_state = () -> {
					try {
						js.eval(comp_codigo.get(comp));
					} catch (ScriptException ex) {
						System.out.println("Hubo un error:"+ex);
					}
					System.out.println("Salgo del estado "+id);
				};
				Runnable final_state = () -> {
					System.out.println("El ultimo estado "+id);
					try {
						js.eval(comp_codigo.get(comp));
					} catch (ScriptException ex) {
						System.out.println("Hubo un error:"+ex);
					}
				};
				machine.addState(id,entr_state,sal_state,final_state);
			}else{
				System.out.println("No se ha asociado ningún código de comportamiento al autómata");
			} 
	
	:} ;

//Producciones de error de comp_def
comp_def ::= LLPARENT_OP CMP LLPARENT_CL {: System.out.println("Necesita declarar un estado"); :} ;
comp_def ::= LLPARENT_OP ID COMA LLPARENT_CL {: System.out.println("Necesita declarar un comportamiento para el estado"); :} ;
comp_def ::= LLPARENT_OP ID CMP LLPARENT_CL {: System.out.println("Necesita separar estado y comportamiento con una ','"); :} ;
//////////////////////////////////

transicion ::= TRANS LLCORCH_OP dec_transicion PUNTO_COMA LLCORCH_CL ;

dec_transicion ::= transicion_def:tupla {: System.out.println("Se obtiene tupla1: "+tupla); :} COMA dec_transicion 
		| transicion_def:tupla {: System.out.println("Se obtiene tupla1: "+tupla); :} ;

transicion_def ::= LLPARENT_OP ID:estado_in COMA ID:evento COMA ID:estado_out LLPARENT_CL {: RESULT=estado_in+"-"+evento+"-"+estado_out; machine.addTransition(evento,estado_in,estado_out); :} ;

//Producciones de error de transicion_def
transicion_def ::= LLPARENT_OP ID ID COMA ID LLPARENT_CL {: System.out.println("Ha olvidado una ','"); :} ;
transicion_def ::= LLPARENT_OP ID COMA ID ID LLPARENT_CL {: System.out.println("Ha olvidado una ','"); :} ;
/****************************************/

